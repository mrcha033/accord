"""Generate agent scope matrix from ALOU contracts.

Usage::

    python -m scripts.gen_scope_matrix [--base PATH]

Outputs ``docs/agent-scope-matrix.md``.
"""

from __future__ import annotations

import argparse
from dataclasses import dataclass
from pathlib import Path
from typing import Iterable, List

import yaml


@dataclass
class ScopeInfo:
    agent_id: str
    role_title: str
    mcp_allow: List[str]
    write_scopes: List[str]
    data_classification: str


def _load_frontmatter(path: Path) -> dict:
    lines = path.read_text(encoding="utf-8").splitlines()
    if not lines or lines[0].strip() != "---":
        raise ValueError(f"ALOU missing frontmatter: {path}")
    body: List[str] = []
    for line in lines[1:]:
        if line.strip() == "---":
            break
        body.append(line)
    return yaml.safe_load("\n".join(body)) or {}


def _collect_scopes(base: Path) -> List[ScopeInfo]:
    registry = base / "org/_registry"
    infos: List[ScopeInfo] = []
    for path in sorted(registry.glob("*.alou.md")):
        data = _load_frontmatter(path)
        infos.append(
            ScopeInfo(
                agent_id=str(data["agent_id"]),
                role_title=str(data.get("role_title", "")),
                mcp_allow=[str(v) for v in data.get("mcp_allow", [])],
                write_scopes=[str(v) for v in data.get("fs_write_scopes", [])],
                data_classification=str(data.get("data_classification", "internal")),
            )
        )
    return infos


def build_markdown(scopes: Iterable[ScopeInfo]) -> str:
    header = "<!-- Generated by scripts/gen_scope_matrix.py; do not edit manually. -->\n"
    title = "# Agent Scope Matrix\n\n"
    table_header = (
        "| Agent ID | Role Title | MCP Allow | Write Scopes | Data Classification |\n"
        "| --- | --- | --- | --- | --- |\n"
    )
    rows = []
    for info in sorted(scopes, key=lambda x: x.agent_id):
        mcp = ", ".join(f"`{item}`" for item in info.mcp_allow) or "`n/a`"
        fs = "<br/>".join(f"`{item}`" for item in info.write_scopes) or "`n/a`"
        rows.append(
            f"| `{info.agent_id}` | {info.role_title} | {mcp} | {fs} | {info.data_classification} |\n"
        )
    return header + title + table_header + "".join(rows)


def write_matrix(base: Path) -> Path:
    scopes = _collect_scopes(base)
    output = base / "docs/agent-scope-matrix.md"
    content = build_markdown(scopes)
    if not output.exists() or output.read_text(encoding="utf-8") != content:
        output.parent.mkdir(parents=True, exist_ok=True)
        output.write_text(content, encoding="utf-8")
    return output


def main(argv: list[str] | None = None) -> int:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--base", default=".", help="Project base directory")
    args = parser.parse_args(argv)
    base = Path(args.base).resolve()
    write_matrix(base)
    print("Generated docs/agent-scope-matrix.md")
    return 0


if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
