"""Generate agent roster markdown from ALOU contracts.

Usage::

    python -m scripts.gen_roster [--base PATH]

Writes ``agents/README.md`` under the base directory. The file is completely
regenerated â€“ manual edits will be overwritten.
"""

from __future__ import annotations

import argparse
from dataclasses import dataclass
from pathlib import Path
from typing import Iterable, List

import yaml


@dataclass
class AgentInfo:
    agent_id: str
    role_title: str
    chapter: str
    squad: str
    guilds: List[str]
    prompt_path: Path
    charter_path: Path
    write_scopes: List[str]


def _load_frontmatter(path: Path) -> dict:
    lines = path.read_text(encoding="utf-8").splitlines()
    if not lines or lines[0].strip() != "---":
        raise ValueError(f"ALOU missing frontmatter: {path}")
    body: List[str] = []
    for line in lines[1:]:
        if line.strip() == "---":
            break
        body.append(line)
    return yaml.safe_load("\n".join(body)) or {}


def _collect_agents(base: Path) -> List[AgentInfo]:
    registry = base / "org/_registry"
    agents_dir = base / "agents"
    infos: List[AgentInfo] = []
    for path in sorted(registry.glob("*.alou.md")):
        data = _load_frontmatter(path)
        agent_id = str(data["agent_id"])
        role_title = str(data.get("role_title", ""))
        cluster = data.get("cluster_path", {})
        chapter = str(cluster.get("chapter", ""))
        squad = str(cluster.get("squad", ""))
        guilds = [str(g) for g in cluster.get("guilds", [])]
        write_scopes = [str(scope) for scope in data.get("fs_write_scopes", [])]
        prompt = agents_dir / agent_id / "prompt.md"
        infos.append(
            AgentInfo(
                agent_id=agent_id,
                role_title=role_title,
                chapter=chapter,
                squad=squad,
                guilds=guilds,
                prompt_path=prompt.relative_to(base),
                charter_path=path.relative_to(base),
                write_scopes=write_scopes,
            )
        )
    return infos


def build_markdown(agents: Iterable[AgentInfo]) -> str:
    header = "<!-- Generated by scripts/gen_roster.py; do not edit manually. -->\n"
    title = "# Agent Roster\n\n"
    table_header = (
        "| Agent ID | Chapter | Squad | Role Title | Prompt | Charter | Write Scopes |\n"
        "| --- | --- | --- | --- | --- | --- | --- |\n"
    )
    rows: List[str] = []
    for info in sorted(agents, key=lambda x: x.agent_id):
        scopes = ", ".join(f"`{scope}`" for scope in info.write_scopes) or "`n/a`"
        row = (
            f"| `{info.agent_id}` | {info.chapter or 'n/a'} | {info.squad or 'n/a'} | {info.role_title} | "
            f"`{info.prompt_path}` | `{info.charter_path}` | {scopes} |\n"
        )
        rows.append(row)
    guild_section = "\n" + "\n".join(
        [
            "## Guild Membership\n",
            "| Agent ID | Guilds |",
            "| --- | --- |",
        ]
    )
    guild_rows = [
        f"| `{info.agent_id}` | {', '.join(info.guilds) or 'n/a'} |"
        for info in sorted(agents, key=lambda x: x.agent_id)
    ]
    body = header + title + table_header + "".join(rows) + guild_section + "\n" + "\n".join(guild_rows) + "\n"
    return body


def write_roster(base: Path) -> Path:
    agents = _collect_agents(base)
    output = base / "agents/README.md"
    content = build_markdown(agents)
    if not output.exists() or output.read_text(encoding="utf-8") != content:
        output.write_text(content, encoding="utf-8")
    return output


def main(argv: list[str] | None = None) -> int:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--base", default=".", help="Project base directory")
    args = parser.parse_args(argv)
    base = Path(args.base).resolve()
    write_roster(base)
    print("Generated agents/README.md")
    return 0


if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
